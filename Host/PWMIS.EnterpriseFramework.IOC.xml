<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PWMIS.EnterpriseFramework.IOC</name>
    </assembly>
    <members>
        <member name="T:PWMIS.EnterpriseFramework.IOC.DynamicMethodExecutor">
            <summary>
            动态方法执行器
            </summary>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.DynamicMethodExecutor.#ctor(System.Reflection.MethodInfo)">
            <summary>
            默认构造函数
            </summary>
            <param name="methodInfo">方法对象</param>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.DynamicMethodExecutor.Execute(System.Object,System.Object[])">
            <summary>
            执行方法
            </summary>
            <param name="instance">包含方法的对象实例</param>
            <param name="parameters">调用方法所需要的参数</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.EnterpriseFramework.IOC.IOCConfig.IOCConfigEntity">
            <summary>
            获取IOC配置信息类
            </summary>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.IOCConfig.AddIocProvider(System.String,PWMIS.EnterpriseFramework.IOC.IocProvider)">
            <summary>
            增加一个Ioc提供程序的配置
            </summary>
            <param name="iocName">所在的Ioc名称，没有将添加</param>
            <param name="provider">提供程序信息</param>
            <returns>添加是否成功</returns>
        </member>
        <member name="T:PWMIS.EnterpriseFramework.IOC.Unity">
            <summary>
            依赖注入容器管理类
            </summary>
        </member>
        <member name="P:PWMIS.EnterpriseFramework.IOC.Unity.Instance">
            <summary>
            获取容器管理类的实例
            </summary>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetCacheType(System.String,System.String)">
            <summary>
            获取缓存中的类型
            </summary>
            <param name="typeName">类型的全名称</param>
            <param name="assemblyName">当前类型加载的程序集名称</param>
            <returns>类型</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetFactTypes(System.Type,System.String)">
            <summary>
            获取指定的程序集中符合某个基类的所有派生类类型
            </summary>
            <param name="baseType">基类性，如接口，抽象类</param>
            <param name="assemblyName">指定的程序集名称</param>
            <returns>所有派生类类型</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetProviders(System.String)">
            <summary>
            根据容器名称，获取容器中所有的提供程序信息
            </summary>
            <param name="iocName">容器名称</param>
            <returns>提供程序列表</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetProviderInstance(PWMIS.EnterpriseFramework.IOC.IocProvider)">
            <summary>
            根据提供程序获取它的实例
            </summary>
            <param name="provider">提供程序</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetProviderType(PWMIS.EnterpriseFramework.IOC.IocProvider)">
            <summary>
            获取提供程序的运行时类型（将通过缓存提升效率）
            </summary>
            <param name="provider">提供程序</param>
            <returns>对象类型</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.CreateInstance``1(System.String,System.String)">
            <summary>
            创建指定类型（接口，抽象类）的实例
            </summary>
            <typeparam name="T">指定类型（接口，抽象类）</typeparam>
            <param name="providerAssembly">提供程序的程序集名称</param>
            <param name="providerType">类型的完整名称</param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.EnterpriseFramework.IOC.Unity.ProviderCompare">
            <summary>
            提供程序比较委托
            </summary>
            <param name="provider">提供程序</param>
            <returns>是否符合比较条件</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.findProvider(PWMIS.EnterpriseFramework.IOC.Unity.ProviderCompare)">
            <summary>
            从容器中寻找指定的提供程序配置信息
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.findProviderList(PWMIS.EnterpriseFramework.IOC.Unity.ProviderCompare)">
            <summary>
            根据条件寻找提供程序列表
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetInstance``1">
            <summary>
            从所有容器中寻找符合当前指定类型（接口）的第一个提供程序
            </summary>
            <typeparam name="T">指定类型（接口）</typeparam>
            <returns>提供程序</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetInstance``1(System.String,System.String)">
            <summary>
            从指定的容器名称中寻找指定的提供程序（容器的项名，XPath="/GroupSet/IOC[@Name='iocName']/Add[@Key='iocItemKey']"）
            </summary>
            <typeparam name="T">指定类型（接口）</typeparam>
            <param name="iocName">容器名称</param>
            <param name="iocItemKey">容器中的项名称</param>
            <returns>提供程序</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetInstance``1(System.String)">
            <summary>
            从所有容器名称中寻找指定的提供程序（容器的项名，XPath="/GroupSet/IOC/Add[@Key='iocItemKey']"），如果有多个，返回第一个。
            </summary>
            <typeparam name="T">指定类型（接口）</typeparam>
            <param name="iocName">容器名称</param>
            <param name="iocItemKey">容器中的项名称</param>
            <returns>提供程序</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetInstanceList``1">
            <summary>
            从所有容器中寻找符合当前指定类型（接口）的 提供程序列表
            </summary>
            <typeparam name="T">指定类型（接口）</typeparam>
            <returns>提供程序列表</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetInstanceList(System.String)">
            <summary>
            从所有容器中寻找符合当前指定类型（接口）的 提供程序列表
            </summary>
            <param name="interfaceName">容器中定义的接口别名</param>
            <returns>提供程序列表</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetInterfaceInstance(System.String)">
            <summary>
             从所有容器中寻找符合当前指定类型（接口）的第一个提供程序，提供程序信息不能定义在AOP组中
            </summary>
            <param name="interfaceName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.InvokeMethod(System.String,System.String,System.Type[],System.Object[])">
            <summary>
            根据在容器中注册的项名称，执行指定的方法。
            </summary>
            <param name="iocItemKey">注册的项名称</param>
            <param name="methodName">要执行的方法名称</param>
            <param name="parasType">方法的参数类型数组，例如 new Type[] { typeof(string),typeof(int) }</param>
            <param name="parasValue">跟方法参数对应的参数值数组，例如 new object[]{"aaa",999}</param>
            <returns>执行方法返回的值</returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.InvokeMethod(System.String,System.String,System.String,System.Type[],System.Object[])">
            <summary>
            根据指定的程序集信息，执行指定的方法
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="fullClassName">完整的类名称（带名称空间）</param>
            <param name="methodName">方法名称</param>
            <param name="parasType">执行方法需要的参数类型定义</param>
            <param name="parasValue">执行方法需要的参数值</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.EnterpriseFramework.IOC.Unity.GetInterfaceName(System.String)">
            <summary>
            从IOC配置文件中根据具体的接口类型名称寻找接口名称
            </summary>
            <param name="interfaceTypeName">接口类型名称</param>
            <returns>接口名称</returns>
        </member>
    </members>
</doc>
